name: CI/CD Pipeline

on:
  pull_request:   # Run tests on PRs
    branches:
      - main
  push:           # Deploy on merge to main
    branches:
      - main

jobs:
  # ✅ JOB 1: Run Tests on Pull Requests
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Build the Docker image for testing
      - name: Build Docker Image
        run: docker build -t blockhouse-test .

      # Run Unit Tests inside the container
      - name: Run Unit Tests with Pytest
        run: docker run --rm -p 80:8000 blockhouse-test pytest tests/

  # ✅ JOB 2: Build and Deploy on Merge to Main
  deploy:
    needs: test  # Ensures deployment only runs if tests pass
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Build the Docker Image for Deployment
      - name: Build Production Docker Image
        run: docker build -t blockhouse:latest .

      - name: Create SSH Key File
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > my-key.pem
          chmod 600 my-key.pem

      # Test SSH Connection to EC2
      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -i my-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH Connection Successful!'"

      # Deploy to EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}         
          username: ${{ secrets.EC2_USER }}     
          key: ${{ secrets.EC2_SSH_KEY }}       
          script: |
            cd /home/ubuntu/blockhouse || { echo "Deployment directory not found"; exit 1; }
            if [ -d ".git" ]; then
              echo "Repository exists, pulling latest changes..."
              git pull
            else
              echo "Cloning repository..."
              git clone https://github.com/RonaldRommel/Blockhouse.git .
            fi
            docker build -t blockhouse .
            docker stop blockhouse || true
            docker rm blockhouse || true
            docker run -d -v ./data:/code/data -p 80:8000 --name blockhouse blockhouse:latest
